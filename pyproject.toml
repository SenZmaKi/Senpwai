[tool.poetry]
name = "senpwai"
version = "2.1.15"
description = "A desktop app for tracking and batch downloading anime"
authors = ["SenZmaKi <senzmaki@gmail.com>"]
license = "GPL v3"
readme = "README.md"
include = ["senpwai/assets"]
packages = [{ include = "senpwai" }, { include = "senpcli", from = "senpwai" }]
exclude = ["src/**/test.py"]
repository = "https://github.com/SenZmaKi/Senpwai"
documentation = "https://github.com/SenZmaKi/Senpwai/blob/master/README.md"
keywords = [
    "anime",
    "app",
    "cli",
    "desktop app",
    "anime downloader",
    "anime cli",
    "anime app",
    "anime tracker",
    "batch anime downloader",
    "bulk anime  downloader",
    "anime desktop app",
    "anime tracker app",
]

[tool.cx_freeze]
icon = "senpwai/assets/misc/senpwai-icon.ico"
cli_name = "senpcli"
company = "AKatsuKi Inc."
copyright = "Â© AKatsuKi Inc. All rights reserved."

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/SenZmaKi/Senpwai/issues"
"Discord" = "https://discord.gg/invite/e9UxkuyDX2"
"Reddit" = "https://www.reddit.com/r/Senpwai"

[tool.poetry.scripts]
senpwai = "senpwai.main:main"
senpcli = "senpwai.senpcli.main:main"

[tool.poetry.dependencies]
python = "^3.11"
requests = "^2.31.0"
yarl = "^1.9.4"
cryptography = "^41.0.7"
anitopy = "^2.1.1"
bs4 = "^0.0.1"
appdirs = "^1.4.4"
tqdm = "^4.66.1"
argparse = "^1.4.0"
pylnk3 = "^0.4.2"
pyqt6 = "^6.6.1"

[tool.poetry.group.dev.dependencies]
cx-freeze = "^6.15.12"
ruff = "^0.2.1"
poethepoet = "^0.24.4"
poetry-plugin-export = "^1.8.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe]
envfile = ".env"

[tool.poe.tasks]
release = "python -m scripts.release"
export_dependencies = "poetry export -f requirements.txt --output requirements.txt"
bump_version = "python -m scripts.bump_version"
announce = "python -m scripts.announce"
announce_discord = "python scripts/announce/discord.py"
announce_reddit = "python  scripts/announce/reddit.py"
format = "python -m scripts.ruff --format"
lint_fix = "python -m scripts.ruff --lint_fix"
lint = "python -m scripts.ruff --lint"
build_release_test = [
    { ref = "lint" },
    { ref = "test" },
    { ref = "build_release" },
]
build_release_ddl = [{ ref = "test_ddl" }, { ref = "build_release" }]
build_release = [
    { ref = "build_exes" },
    { ref = "compile_installers" },
    { ref = "install" },
    { ref = "run_exes" },
    { ref = "build_pip" },
    { ref = "install_pip" },
    { ref = "run_pip_exes" },
    { ref = "make_portables" },
]
test = [{ ref = "test_pahe" }, { ref = "test_gogo" }]
test_pahe = "python -m senpwai.scrapers.test --site pahe all"
test_gogo = [{ ref = "test_gogo_norm" }, { ref = "test_gogo_hls" }]
test_gogo_norm = "python -m senpwai.scrapers.test --site gogo direct_links download"
test_gogo_hls = "python -m senpwai.scrapers.test --site gogo hls_links download"

test_ddl = [{ ref = "test_pahe_ddl" }, { ref = "test_gogo_ddl" }]
test_pahe_ddl = "python -m senpwai.scrapers.test --site pahe direct_links"
test_pahe_dpl = "python -m senpwai.scrapers.test --site pahe download_page"
test_gogo_ddl = [{ ref = "test_gogo_norm_ddl" }, { ref = "test_gogo_hls_ddl" }]
test_gogo_norm_ddl = "python -m senpwai.scrapers.test --site gogo direct_links"
test_gogo_hls_ddl = "python -m senpwai.scrapers.test --site gogo hls_links"
test_pip = [
    { ref = "build_pip" },
    { ref = "install_pip" },
    { ref = "run_pip_exes" },
]

build_exes = [{ ref = "build_senpwai_exe" }, { ref = "build_senpcli_exe" }]
build_senpwai_exe = "python -m scripts.setup build"
build_senpcli_exe = "python -m scripts.setup --senpcli build"

compile_installers = [
    { ref = "compile_senpwai_installer" },
    { ref = "compile_senpcli_installer" },
]
compile_senpwai_installer = "iscc scripts/setup.iss /Q"
compile_senpcli_installer = "iscc scripts/setup_senpcli.iss /Q"

install = [{ ref = "install_senpwai" }, { ref = "install_senpcli" }]
install_senpwai = "release/Senpwai-setup.exe /verysilent"
install_senpcli = "release/Senpcli-setup.exe /verysilent"

build_pip = [{ ref = "trash_dist" }, { ref = "poetry_build" }]
trash_dist = "trash dist"
poetry_build = "poetry build"
install_pip = "python -m scripts.install_pip"
publish_pip = "poetry publish"
run_all_exes = "python -m scripts.run_exes --all"
run_exes = [{ ref = "run_senpwai_exe" }, { ref = "run_senpcli_exe" }]
run_pip_exes = [
    { ref = "run_senpwai_pip_exe" },
    { ref = "run_senpcli_pip_exe" },
]
run_senpwai_exe = "python -m scripts.run_exes --senpwai"
run_senpcli_exe = "python -m scripts.run_exes --senpcli"
run_senpwai_pip_exe = "python -m scripts.run_exes --senpwai_pip"
run_senpcli_pip_exe = "python -m scripts.run_exes --senpcli_pip"

make_portables = [
    { ref = "make_portable_senpwai" },
    { ref = "make_portable_senpcli" },
]
make_portable_senpwai = "python -m scripts.make_portable --senpwai"
make_portable_senpcli = "python -m scripts.make_portable --senpcli"
